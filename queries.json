GET _cat/health

GET /_cat/indices?v

GET /_cat/shards

DELETE /pages

PUT /products_v2/_settings
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 2
  }
}

GET _cluster/allocation/explain?pretty

POST /products/_doc
{
  "name": "Toaser",
  "price": 42,
  "in_stock": 160
}


POST /products/_doc/100
{
  "name": "Dell Laptop",
  "price": 3100,
  "in_stock": 30
}


GET /products/_doc/100

# update the API
POST /products/_update/100
{
  "doc": {
    "in_stock": 28
  }
}

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock = 10"
  }
}

POST /products/_update/100
{
  "script": {
    "source": "ctx._source.in_stock -= params.quantity",
    "params": {
      "quantity": 4
    }
  }
}

POST /products/_update/102
{
  "script": {
    "source": "ctx._source.in_stock++"
  },
  "upsert": {
    "name": "Blender",
    "price": 399,
    "in_stock": 5
  }
}

GET /products/_doc/102

DELETE /products/_doc/101



POST /products/_update/102?if_primary_term=6&if_seq_no=6
{
  "doc": {
    "in_stock": 122
  }  
}

GET /products/_search

# update by query
POST /products/_update_by_query
{
  "conflicts": "proeed", 
  "script": {
    "source": "ctx._source.in_stock--",
    "lang": "painless"
  },
  "query": {
    "match_all": {}
  }
}

# update by query
POST /products_v2/_delete_by_query
{
  "conflicts": "proeed", 
  "script": {
    "source": "ctx._source.in_stock--",
    "lang": "painless"
  },
  "query": {
    "match_all": {}
  }
}


# BULK API
# index action will REPLACE if the document already exists
# create action will FAIL if the document already exists
POST /_bulk
{ "index": { "_index": "products", "_id": 200 } }
{ "name": "Espresso Machine", "price": 199, "in_stock": 6 }
{ "create": { "_index": "products", "_id": 201 } }
{ "name": "Mixer", "price": 149, "in_stock": 26 }


GET /products/_search
{
  "query": {
    "match_all": {}
  }
}


POST /products/_bulk
{ "update": { "_id": 201 } }
{ "doc": { "price": 199 } }
{ "delete": { "_id": 200 } }

POST /_analyze
{
  "text": "2 guys walk into   a bar, but the third... DUCKS! :-)",
  "analyzer": "standard"
}

# there is no such thing as an array
# this will be merged as text with a space in between
POST /_analyze
{
  "text": ["Strings are simply", "merged togeter", "you see?"],
  "analyzer": "standard"
}

PUT /reviews
{
  "mappings": {
    "properties": {
      "rating": { "type": "float" },
      "content": { "type": "text" },
      "product_id": { "type": "integer" },
      "author": { 
        "properties": {
          "first_name": { "type": "text" },
           "last_name": { "type": "text" },
           "email": { "type": "keyword" }        
        }
      }
    }
  }
}

POST /reviews/_doc
{
  "rating": 5.0,
  "content": "Very nice!",
  "product_id": 123,
  "author": {
    "first_name": "John",
    "last_name": "Doe",
    "email": "johndoe@example.com"
  }
}

# this won't work because author is not an object
POST /reviews/_doc
{
  "rating": 5.0,
  "content": "Very nice!",
  "product_id": 123,
  "author": 1223
}

GET /reviews/_search

# Getting the mapping of an author
GET /reviews/_mapping/field/author.email


# using dot notation
PUT /reviews_with_dot_notation
{
  "mappings": {
    "properties": {
      "rating": { "type": "float" },
      "content": { "type": "text" },
      "product_id": { "type": "integer" },
      "author.email": { "type": "text" },
      "author.first_name": { "type": "text" },
      "author.last_name": { "type": "text" } 
    }
  }
}

GET /reviews_with_dot_notation/_mapping


### Dates

# update
PUT /reviews/_doc/3
{
  "created_at": "2020-03-25T23:39:31Z",
  "author": {
    "first_name": "Spencer",
    "last_name": "Pearson"
  }
}

# with timezone
PUT /reviews/_doc/4
{
  "created_at": "2020-03-24T23:39:31+08:00",
  "author": {
    "first_name": "Conor",
    "last_name": "McGregor"
  }
}

# EPOCH
PUT /reviews/_doc/4
{
  "created_at": 1622643878713143,
  "author": {
    "first_name": "Adam",
    "last_name": "McKay"
  }
}


### NULL keyowrd 

PUT my-index-with-null
{
  "mappings": {
    "properties": {
      "status_code": {
        "type":       "keyword",
        "null_value": "NULL" 
      }
    }
  }
}

PUT my-index-with-null/_doc/1
{
  "status_code": null
}

PUT my-index-with-null/_doc/2
{
  "status_code": []
}

PUT my-index-with-null/_doc/3
{
  "status_code": 200
}

GET my-index-with-null/_search
{
  "query": {
    "term": {
      "status_code": "NULL"
    }
  }
}

### Updating mapping
GET /reviews/_mapping

PUT /reviews/_mapping
{
  "properies": {
    "author": {
      "properties": {
        "product_id": {
          "type": "keyword"
        }
      }
    }
  }
}
# this will throw an error


# reindex api
POST /_reindex
{
  "source": {
    "index": "reviews"
  },
  "dest": {
    "index": "reviews_v2"
  }
}
